name: Pull Request
on:
  pull_request:
    branches:
      - main

permissions:
  contents: read
jobs:
  Terraform:
    name: Terraform Plan
    runs-on: ubuntu-latest

    env:
      SONARCLOUD_ORGANIZATION: ${{ secrets.SONARCLOUD_ORGANIZATION }}
      SONARCLOUD_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
    permissions:
      pull-requests: write

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform-scripts

    steps:
    - uses: actions/checkout@v4  

    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.4

    # Checks that all Terraform configuration files adhere to a canonical format
    - run: terraform fmt -check
      id: fmt      
      continue-on-error: true

    - run: terraform init
      env:
        GITHUB_TOKEN: ${{ secrets.TF_GITHUB_TOKEN }}
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - run: terraform validate -no-color
      id: validate

    - run: terraform plan -no-color -input=false
      id: plan
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.TF_GITHUB_TOKEN }}
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # - name: Tidy Plan output
    #   if: github.event_name == 'pull_request'
    #   run : |
    #     echo "${{ steps.plan.outputs.stdout }}" | grep -E '^\s*[~+-]' > plan-out.txt
    #     cat plan-out.txt
    #     echo 'PLAN_OUTPUT<<EOF' >> $GITHUB_ENV
    #     echo "$(cat plan-out.txt)" >> $GITHUB_ENV
    #     echo 'EOF' >> $GITHUB_ENV

    # - uses: actions/github-script@v6
    #   if: github.event_name == 'pull_request'
    #   env:
    #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
    #   with:
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     script: |
    #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
    #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
    #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
    #       <details><summary>Validation Output</summary>
          
    #       \`\`\`\n
    #       ${{ steps.validate.outputs.stdout }}
    #       \`\`\`
          
    #       </details>
          
    #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
    #       <details><summary>Show Plan</summary>
          
    #       \`\`\`\n
    #       ${{ env.PLAN_OUTPUT }}
    #       \`\`\`
          
    #       </details>
          
    #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
          
    #       github.rest.issues.createComment({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         body: output
    #       })